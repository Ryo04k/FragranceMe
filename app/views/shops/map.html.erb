<% content_for(:title, t('shops.map.title')) %>
<div class="mx-auto md:mb-20">
  <div id="map-container">
    <div id="map" class="w-full relative rounded h-screen lg:h-[600px] md:mb-8"></div>

    <div class="absolute right-4 bottom-20 md:bottom-60 z-50">
      <!-- SPのみ ドロワー表示 -->
      <div data-controller="sidebar">
        <%= render "shops/sidebar" %>
        <button data-action="click->sidebar#toggleButton" aria-controls="default-sidebar" type="button" class="lg:hidden z-50 text-white rounded-lg h-20 w-24 md:w-20 bg-main opacity-90 flex flex-col items-center justify-center font-bold mb-3 py-2 hover:brightness-105 transition duration-200" data-sidebar-target="toggleButton">
          <span class="material-symbols-outlined text-white" style="font-size: 35px;">store</span>
          <span data-sidebar-target="buttonText" style="font-size: 13px;">周辺ショップ</span>
        </button>
      </div>
      <!-- // SPのみ ドロワー表示 -->

      <button id="show-location-btn" class="text-white rounded-lg h-18 w-18 bg-main opacity-90 flex flex-col items-center justify-center font-bold w-24 h-20 md:w-20 shadow hover:brightness-105 transition duration-200" style="font-size: 13px;">
        <span class="material-symbols-outlined mb-1 text-white" style="font-size: 35px;">my_location</span>
        現在地を表示
      </button>

      <%= link_to shops_path, class: "hidden md:flex text-main rounded-lg h-18 w-18 opacity-90 bg-white flex flex-col items-center justify-center font-bold w-20 h-20 shadow hover:brightness-105 transition duration-200 mt-3 border border-main", style: 'font-size: 13px;' do %>
        <span class="material-symbols-outlined mb-1 text-main" style="font-size: 30px;">arrow_back</span>
        <p>一覧に戻る</p>
      <% end %>
    </div>

    <div class="shop-list bg-baseColor rounded-md p-4 w-full md:max-w-screen-xl mx-auto hidden lg:block shadow-custom">
      <!-- 現在地周辺の店舗を表示 -->
    </div>
  </div>

  <div id="loading" class="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 hidden">
    <%= image_tag("loading.gif", class: "w-36 h-36", alt: "Loading...") %>
  </div>
</div>

<script type="text/javascript">
  const googleMapApiKey = "<%= ENV["GOOGLE_API_KEY"] %>";
  const shops = <%= @shops_json.to_json.html_safe %>;
  const initialZoomLevel = 16;

  let map, currentLocationCircle, currentLocationMarker, currentInfoWindow;

function initMap() {
  const loadingDiv = document.getElementById("loading");
  const mapDiv = document.getElementById("map-container");

  loadingDiv.classList.remove("hidden"); // ローディングを表示
    mapDiv.classList.add("hidden"); // 初期状態で地図を非表示

  map = new google.maps.Map(document.getElementById("map"), {
    disableDefaultUI: true,
    gestureHandling: "greedy",
    zoom: initialZoomLevel
  });

  // ユーザーの現在地を取得し、地図上に表示
  showCurrentLocation().finally(() => {
    loadingDiv.classList.add("hidden"); // ローディングを非表示
    mapDiv.classList.remove("hidden"); // 地図を表示
  });

  // マップ上にショップのマーカーを表示
  shops.forEach(shop => createMarker(shop));
}

 // ユーザーの現在地を表示するオリジナルマーカー
function setCurrentLocationMaker(map, userLocation) {
  // 既存の円がある場合は削除
  if (currentLocationCircle) {
    currentLocationCircle.setMap(null);
}

    // 現在地の円を作成
    currentLocationCircle = new google.maps.Circle({
      strokeColor: '#e57777',
      strokeOpacity: 0.2,
      strokeWeight: 1,
      fillColor: '#e57777',
      fillOpacity: 0.2,
      map: map,
      center: userLocation,
      radius: 40
    });

    // 現在地を示すマーカーを作成
    new google.maps.Marker({
      position: userLocation,
      map: map,
      icon: {
        path: google.maps.SymbolPath.CIRCLE,
        fillColor: '#e57777',
        fillOpacity: 1,
        strokeColor: 'white',
        strokeWeight: 2,
        scale: 7
      }
    });
  }

  // 現在地の表示ボタン
	document.addEventListener("turbo:load", () => {
		const showLocationButton = document.getElementById("show-location-btn")
		showLocationButton.addEventListener("click", showCurrentLocation);
	});

  // ショップのマーカーを作成
function createMarker(shop) {
  const marker = new google.maps.Marker({
    map: map,
    position: {
      lat: parseFloat(shop.latitude),
      lng: parseFloat(shop.longitude)
    },
    title: shop.name
  });

  marker.addListener("click", () => {
    // 既存のInfoWindowがあれば閉じる
    if (currentInfoWindow) {
      currentInfoWindow.close();
    }

    const imageUrl = `https://maps.googleapis.com/maps/api/place/photo?maxheight=300&maxwidth=300&photo_reference=${shop.image}&key=${googleMapApiKey}`;
    const infoWindowContent = generateInfoWindowContent(shop, imageUrl);

        // 新しいInfoWindowを作成
        currentInfoWindow = new google.maps.InfoWindow({
            content: infoWindowContent
        });

        // 新しいInfoWindowを開く
        currentInfoWindow.open(map, marker);
    });
}

function generateInfoWindowContent(shop, imageUrl) {
  return `
    <div class="w-52 p-3 pt-0 rounded shadow flex flex-col items-center">
      <h3 class="text-base font-semibold mb-2 text-center line-clamp-2">${shop.name}</h3>
      <div class="flex items-center mb-2">
        ${generateStarRating(shop.rating)}
        <p class="text-base text-yellow-400 font-semibold ml-2">${shop.rating}</p>
      </div>
      <img src="${imageUrl}" alt="${shop.name}" class="w-full h-32 object-cover mb-4" loading="lazy">
      <a href="/shops/${shop.id}" class="w-full text-sm text-center border-custom border-2 rounded py-2 transition-all hover:border-main hover:text-main">詳細を見る</a>
    </div>
  `;
}

// ユーザーの現在地と周辺ショップ情報を取得
async function showCurrentLocation() {
  try {
    if (!navigator.geolocation){
      alert('お使いのブラウザでは地理位置情報の取得がサポートされていません。');
      map.setCenter({ lat: 35.6803997, lng: 139.7690174 }); // 東京の座標
      return;
    }

    // 現在地を取得
    const position = await getCurrentPosition();
    const userLocation = {
      lat: position.coords.latitude,
      lng: position.coords.longitude,
    };

    // 地図の中心を現在地に設定
    map.setCenter(userLocation);
    map.setZoom(initialZoomLevel);

    // 現在地のマーカーを表示
    setCurrentLocationMaker(map, userLocation);

    await fetchNearbyShops(userLocation.lat, userLocation.lng);

  } catch (error) {
    alert('位置情報の取得に失敗しました。');
    map.setCenter({ lat: 35.6803997, lng: 139.7690174 }); // 東京の座標
  }

  function getCurrentPosition() {
    return new Promise((resolve, reject) =>{
      navigator.geolocation.getCurrentPosition(resolve,reject);
    });
  }
}

// 周辺のショップ情報を取得
async function fetchNearbyShops(lat, lng) {
  try {
    const response = await fetch(`/shops/list?latitude=${lat}&longitude=${lng}`);
    const shops = await response.json();
    displayShopList(shops); // 店舗リストを表示する関数を呼び出す
  } catch (error) {
    console.error('Error:', error);
  }
}

function displayShopList(shops) {
  const shopListElements = document.querySelectorAll('.shop-list');

  shopListElements.forEach(shopListElement => {
    shopListElement.innerHTML = '<h2 class="text-lg md:text-2xl text-center font-bold mt-2 mb-5">現在地から近いショップ</h2>';

  if (shops.length > 0){
    const ul = document.createElement('ul');
    ul.className = "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8";

    shops.forEach(shop => {
      const li = createShopListItem(shop);
      ul.appendChild(li);
    });
    shopListElement.appendChild(ul);
  }else{
    shopListElement.innerHTML += '<p class="text-base text-center mb-4">周辺にショップが見つかりませんでした。</p>';
  }
  });
}

function createShopListItem(shop) {
  const li = document.createElement('li');
  li.className = "border rounded shadow-sm flex flex-col hover:opacity-90 duration-300 group";

  const imageUrl = `https://maps.googleapis.com/maps/api/place/photo?maxheight=300&maxwidth=300&photo_reference=${shop.image}&key=${googleMapApiKey}`;
  const shopLink = `/shops/${shop.id}`;
  li.innerHTML = `
    <a href="${shopLink}" class="flex flex-col h-full">
      <div class="w-full h-36 overflow-hidden mb-0">
        <img src="${imageUrl}" alt="${shop.name}" class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105 group-hover:opacity-85" loading="lazy">
      </div>
      <div class="flex flex-col flex-grow p-4 pb-8">
        <h3 class="text-base font-semibold mb-1 line-clamp-2">${shop.name}</h3>
        <div class="flex items-center mb-2">
          ${generateStarRating(shop.rating)}
          <p class="text-base text-yellow-400 font-semibold ml-2">${shop.rating}</p>
        </div>
      </div>
    </a>
  `;

  return li;
}

	// レビュー評価の関数
function generateStarRating(rating) {
  const fullStars = Math.floor(rating);
  const halfStar = rating - fullStars >= 0.5;
  const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

  return `
    ${'<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path d="M10 15l-5.878 3.09 1.122-6.534L0 6.236l6.545-.954L10 0l2.455 5.282L20 6.236l-5.244 5.32 1.122 6.534z" /></svg>'.repeat(fullStars)}
    ${halfStar ? '<svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 20 20"><path d="M10 15l-5.878 3.09 1.122-6.534L0 6.236l6.545-.954L10 0l2.455 5.282L20 6.236l-5.244 5.32 1.122 6.534z" /></svg>' : ''}
    ${'<svg class="w-4 h-4 text-yellow-400 opacity-50" fill="currentColor" viewBox="0 0 20 20"><path d="M10 15l-5.878 3.09 1.122-6.534L0 6.236l6.545-.954L10 0l2.455 5.282L20 6.236l-5.244 5.32 1.122 6.534z" /></svg>'.repeat(emptyStars)}
  `;
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["GOOGLE_API_KEY"] %>&callback=initMap" defer></script>